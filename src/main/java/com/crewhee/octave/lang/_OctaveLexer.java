/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.crewhee.octave.lang;

import com.intellij.lexer.FlexAdapter;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_OctaveLexer2.flex</tt>
 */
public class _OctaveLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WS_MATTERS = 2;
  public static final int LOOK_FOR_CTRANS = 4;
  public static final int SINGLE_QOUTE_STRING_STATE = 6;
  public static final int BLOCKCOMMENT_STATE = 8;
  public static final int BLOCK_HASH_COMMENT_STATE = 10;
  public static final int LOOK_FOR_LINECOMMENT = 12;
  public static final int LINECOMMENT_STATE = 14;
  public static final int FILE_NAME_STATE = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  0,  1,  0,  1,  2,  2,  3,  4,  3,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17536 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\11\1\24\3\11\1\24\71\11\1\25\1\11\1\26\1\27"+
    "\1\30\1\31\2\27\16\0\1\32\1\33\1\34\1\35\2\11\1\36\11\11\1\37\21\11\1\40\1"+
    "\41\24\11\1\42\3\11\1\24\1\43\1\42\4\11\1\44\1\45\4\0\1\46\1\47\1\27\3\11"+
    "\2\50\1\27\1\51\1\52\1\0\1\53\5\11\1\54\2\0\1\55\1\56\1\57\13\11\1\60\1\46"+
    "\1\61\1\62\1\55\1\63\1\27\1\64\1\65\3\11\3\0\1\66\12\11\1\67\1\0\1\70\1\27"+
    "\1\55\1\71\3\11\1\54\1\72\1\23\2\11\1\67\1\73\1\74\1\75\2\27\3\11\1\76\1\11"+
    "\1\50\6\27\2\11\1\32\1\77\2\27\1\100\5\0\1\101\6\11\1\102\2\0\1\103\1\11\1"+
    "\104\1\55\1\42\1\11\1\105\1\106\1\107\2\11\1\110\1\111\1\112\1\113\1\114\1"+
    "\64\1\115\1\104\1\55\1\116\1\117\1\120\1\121\1\107\2\11\1\110\1\122\1\123"+
    "\1\124\1\125\1\126\1\127\1\130\1\55\1\131\1\27\1\120\1\37\1\36\2\11\1\110"+
    "\1\132\1\112\1\46\1\133\1\134\1\27\1\104\1\55\1\43\1\135\1\120\1\106\1\107"+
    "\2\11\1\110\1\132\1\112\1\113\1\125\1\136\1\115\1\104\1\55\1\43\1\27\1\137"+
    "\1\140\1\141\1\142\1\117\1\140\1\11\1\143\1\144\1\145\1\146\1\27\1\130\1\55"+
    "\1\27\1\43\1\147\1\32\1\110\2\11\1\110\1\11\1\150\1\151\1\145\1\152\1\50\1"+
    "\104\1\55\2\27\1\105\1\32\1\110\2\11\1\110\1\153\1\112\1\151\1\145\1\152\1"+
    "\34\1\104\1\55\1\154\1\27\1\147\1\32\1\110\4\11\1\155\1\151\1\156\1\157\1"+
    "\44\1\104\1\55\1\27\1\41\1\160\1\11\1\24\1\41\2\11\1\36\1\161\1\24\1\162\1"+
    "\163\1\0\1\130\1\55\1\164\1\27\1\42\5\11\1\165\1\166\1\167\1\170\1\55\1\171"+
    "\4\27\1\172\1\173\1\174\1\42\1\175\1\176\1\165\1\177\1\200\1\51\1\55\1\201"+
    "\4\27\1\134\2\27\1\202\1\55\1\171\1\203\1\204\1\11\1\42\3\11\1\30\1\45\1\0"+
    "\1\151\1\205\1\0\1\45\3\0\1\206\1\207\7\27\5\11\1\54\1\0\1\210\1\55\1\171"+
    "\1\67\1\211\1\212\1\213\1\214\1\11\1\215\1\216\1\55\1\217\4\11\1\37\1\22\5"+
    "\11\1\220\51\11\1\141\1\24\1\141\5\11\1\141\4\11\1\141\1\24\1\141\1\11\1\24"+
    "\7\11\1\141\10\11\1\221\4\27\2\11\2\27\12\11\2\77\1\42\114\11\1\106\2\11\1"+
    "\42\2\11\1\50\11\11\1\140\1\11\1\134\1\11\1\32\1\222\1\27\2\11\1\222\1\27"+
    "\2\11\1\223\1\27\1\11\1\32\1\224\1\27\6\11\1\225\3\0\1\226\1\227\1\55\1\171"+
    "\3\27\1\230\1\55\1\171\13\11\1\27\1\231\4\11\1\232\10\11\1\77\1\27\3\11\1"+
    "\24\1\0\1\2\1\0\1\2\1\130\1\55\3\11\1\77\1\30\1\27\5\11\1\116\3\11\1\26\1"+
    "\55\1\171\4\27\2\11\1\167\1\2\6\11\1\205\1\170\3\0\1\113\1\55\1\171\1\55\1"+
    "\171\1\44\1\27\1\0\1\51\10\27\1\233\5\11\1\225\1\0\1\233\1\116\1\55\1\171"+
    "\1\27\1\234\1\2\1\27\1\235\3\11\1\103\1\213\1\55\1\71\4\11\1\67\1\0\1\2\1"+
    "\27\4\11\1\225\2\0\1\27\1\55\1\236\1\55\1\71\3\11\1\77\1\11\1\134\10\27\1"+
    "\237\2\0\1\240\1\241\1\202\30\11\7\0\1\242\42\11\2\77\4\11\2\77\1\11\1\243"+
    "\3\11\1\77\6\11\1\32\1\200\1\244\1\30\1\245\1\116\1\11\1\30\1\244\1\30\1\27"+
    "\1\234\3\27\1\246\1\27\1\44\1\134\1\27\1\247\1\27\1\151\1\0\1\43\1\44\2\27"+
    "\1\11\1\30\4\11\2\27\1\0\1\206\1\250\1\0\1\251\1\27\1\252\1\41\1\161\1\253"+
    "\1\31\1\254\1\11\1\255\1\256\1\257\2\27\5\11\1\134\116\27\5\11\1\24\5\11\1"+
    "\24\20\11\1\30\1\260\1\261\1\27\4\11\1\37\1\22\7\11\1\44\1\27\1\64\2\11\1"+
    "\24\1\27\10\24\4\0\5\27\1\44\72\27\1\256\3\27\1\42\1\215\1\253\1\30\1\42\11"+
    "\11\1\24\1\262\1\42\12\11\1\220\1\256\4\11\1\24\1\42\12\11\1\24\2\27\3\11"+
    "\1\50\6\27\170\11\1\77\11\27\75\11\1\50\2\27\21\11\1\30\10\27\5\11\1\77\41"+
    "\11\1\30\2\11\1\55\1\263\2\27\5\11\1\167\1\100\1\264\3\11\1\67\12\11\1\202"+
    "\3\27\1\44\1\11\1\41\14\11\1\107\3\11\1\24\1\11\7\27\1\44\1\11\1\265\1\266"+
    "\2\11\1\54\2\27\1\134\6\11\1\116\1\27\1\267\5\11\1\225\1\0\1\51\1\27\1\55"+
    "\1\171\2\0\1\267\1\270\1\55\1\71\2\11\1\67\1\51\2\11\1\167\1\0\1\2\1\27\3"+
    "\11\1\30\1\101\5\11\1\54\1\0\1\251\1\44\1\55\1\171\1\271\1\11\1\55\1\272\5"+
    "\11\1\103\1\170\1\27\1\266\1\273\1\55\1\171\2\11\1\24\1\274\6\11\1\212\1\275"+
    "\1\232\2\27\1\276\1\11\1\54\1\277\1\27\3\300\1\27\2\24\5\11\1\220\1\77\1\27"+
    "\16\11\1\54\1\301\1\55\1\171\64\11\1\116\1\27\2\11\1\24\1\302\5\11\1\116\40"+
    "\27\55\11\1\77\15\11\1\26\4\27\1\24\1\27\1\302\1\303\1\11\1\110\1\24\1\200"+
    "\1\304\15\11\1\26\3\27\1\302\54\11\1\77\2\27\10\11\1\41\6\11\5\27\1\11\1\30"+
    "\2\0\2\27\2\0\1\117\2\27\1\256\3\27\1\43\1\32\20\11\1\305\1\247\1\27\1\55"+
    "\1\171\1\42\2\11\1\121\1\42\2\11\1\50\1\306\12\11\1\24\3\41\1\307\1\310\2"+
    "\27\1\311\1\11\1\153\2\11\1\24\2\11\1\312\1\11\1\77\1\11\1\77\4\27\17\11\1"+
    "\50\10\27\6\11\1\30\20\27\1\313\20\27\3\11\1\30\6\11\1\134\1\27\1\251\3\27"+
    "\4\11\1\27\1\256\3\11\1\50\4\11\1\67\1\314\3\11\1\77\4\11\1\116\1\11\1\253"+
    "\5\27\23\11\1\77\1\55\1\171\4\11\1\116\4\11\1\116\5\11\1\27\6\11\1\116\23"+
    "\27\46\11\1\24\1\27\2\11\1\77\1\27\1\11\23\27\1\77\1\110\4\11\1\37\1\315\2"+
    "\11\1\77\1\27\2\11\1\24\1\27\3\11\1\24\10\27\2\11\1\316\1\27\2\11\1\77\1\27"+
    "\3\11\1\26\10\27\7\11\1\306\10\27\1\317\1\100\1\153\1\42\2\11\1\116\1\124"+
    "\4\27\3\11\1\30\3\11\1\30\4\27\1\11\1\42\2\11\1\320\3\27\6\11\1\77\1\27\2"+
    "\11\1\77\1\27\2\11\1\50\1\27\2\11\1\26\15\27\11\11\1\134\6\27\6\11\1\50\1"+
    "\27\6\11\1\50\41\27\1\235\6\11\1\0\1\170\3\27\1\130\1\55\1\27\1\64\1\235\5"+
    "\11\1\0\1\321\2\27\3\11\1\134\1\55\1\171\1\235\3\11\1\167\1\0\1\322\1\55\2"+
    "\27\4\11\1\323\1\27\1\235\5\11\1\54\1\0\1\324\1\325\1\55\1\326\4\27\2\11\1"+
    "\36\2\11\1\225\1\0\1\207\10\27\1\24\1\254\1\11\1\37\1\11\1\134\5\11\1\167"+
    "\1\0\1\314\1\55\1\171\1\147\1\106\1\107\2\11\1\110\1\132\1\112\1\113\1\125"+
    "\1\146\1\256\1\327\2\206\21\27\6\11\1\205\1\0\1\210\1\50\1\55\1\171\4\27\6"+
    "\11\2\0\1\330\1\27\1\55\1\171\24\27\5\11\1\167\1\51\1\0\1\251\2\27\1\273\4"+
    "\27\6\11\2\0\1\331\1\27\1\55\1\171\4\27\5\11\1\54\1\0\1\27\1\55\1\171\6\27"+
    "\3\11\1\332\1\0\1\2\1\55\1\171\54\27\10\11\1\55\1\171\1\27\1\44\40\27\1\103"+
    "\1\235\4\11\1\54\1\333\1\64\1\27\1\103\1\101\4\11\1\245\1\215\1\0\1\202\4"+
    "\27\7\11\1\134\40\27\1\11\1\110\3\11\1\167\1\170\1\0\1\134\1\27\1\55\1\171"+
    "\2\27\1\41\3\11\1\334\2\0\1\45\1\170\11\27\1\24\1\36\4\11\1\335\1\336\1\216"+
    "\1\27\1\0\1\202\24\27\63\11\1\26\14\27\15\11\1\24\2\27\30\11\1\116\27\27\5"+
    "\11\1\24\72\27\10\11\1\24\67\27\7\11\1\134\3\11\1\24\1\55\1\171\14\27\3\11"+
    "\1\77\1\206\1\27\6\11\1\170\1\27\1\116\1\27\1\55\1\171\1\302\2\11\1\256\2"+
    "\11\56\27\10\11\1\30\1\27\1\103\4\0\1\170\1\27\1\64\1\235\1\11\10\27\1\26"+
    "\3\27\75\11\1\30\2\27\36\11\1\50\41\27\43\11\1\24\12\27\61\11\1\116\40\27"+
    "\15\11\1\50\1\11\1\30\1\11\1\134\1\11\1\337\1\2\127\27\1\340\1\341\2\0\1\342"+
    "\1\2\3\27\1\343\22\27\1\325\67\27\12\11\1\32\10\11\1\32\1\344\1\345\1\11\1"+
    "\346\1\153\7\11\1\37\1\347\2\32\3\11\1\350\1\200\1\41\1\110\51\11\1\77\3\11"+
    "\1\110\2\11\1\220\3\11\1\220\2\11\1\32\3\11\1\32\2\11\1\24\3\11\1\24\3\11"+
    "\1\110\3\11\1\110\2\11\1\220\1\351\6\55\6\0\1\170\1\234\5\0\1\206\1\313\1"+
    "\27\1\352\2\27\1\234\1\45\1\0\52\27\1\170\2\0\1\353\1\354\1\314\72\27\30\11"+
    "\1\30\1\27\1\170\5\27\10\11\1\225\1\314\1\55\1\171\24\27\1\153\3\11\1\172"+
    "\1\42\1\220\1\355\1\252\1\356\1\172\1\243\1\172\2\220\1\127\1\11\1\36\1\11"+
    "\1\116\1\357\1\36\1\11\1\116\50\27\32\11\1\24\5\27\106\11\1\30\1\27\33\11"+
    "\1\77\120\11\1\26\1\27\146\11\1\134\3\27\3\11\1\77\74\27\1\126\3\27\14\0\20"+
    "\27\36\0\2\27");

  /* The ZZ_CMAP_A table has 1920 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\23\1\4\1\2\2\6\1\3\6\23\4\0\1\5\1\73\1\26\1\14\1\22\1\10\1\71\1\7\1\57"+
    "\1\62\1\67\1\21\1\75\1\65\1\16\1\66\12\24\1\76\1\77\1\63\1\64\1\74\1\0\1\102"+
    "\4\22\1\34\1\31\2\22\1\32\2\22\1\33\1\22\1\35\14\22\1\100\1\25\1\101\1\70"+
    "\1\30\1\0\1\53\1\27\1\41\1\46\1\20\1\36\1\55\1\51\1\17\1\22\1\56\1\44\1\60"+
    "\1\40\1\43\1\52\1\22\1\47\1\45\1\42\1\37\1\61\1\50\1\22\1\54\1\22\1\12\1\72"+
    "\1\13\1\73\6\23\1\11\2\23\2\0\4\22\4\0\1\22\2\0\1\23\7\0\1\22\4\0\1\22\5\0"+
    "\7\22\1\0\2\22\4\0\4\22\16\0\5\22\7\0\1\22\1\0\1\22\1\0\5\22\1\0\2\22\2\0"+
    "\4\22\1\0\1\22\6\0\1\22\1\0\3\22\1\0\1\22\1\0\4\22\1\0\13\22\1\0\3\22\1\0"+
    "\5\23\2\0\6\22\1\0\7\22\1\0\1\22\15\0\1\22\1\0\15\23\1\0\1\23\1\0\2\23\1\0"+
    "\2\23\1\0\1\23\3\22\5\0\6\23\5\0\1\22\4\0\3\23\1\0\1\23\3\0\3\22\5\23\12\15"+
    "\4\0\2\22\1\23\13\22\1\0\1\22\7\23\2\22\2\23\1\0\4\23\2\22\2\15\3\22\2\0\1"+
    "\22\7\0\1\23\1\22\1\23\6\22\3\23\2\0\11\22\3\23\1\22\6\0\2\15\6\22\4\23\2"+
    "\22\2\0\2\23\1\22\11\23\1\22\3\23\1\22\5\23\2\0\1\22\3\23\4\0\6\22\6\0\10"+
    "\23\6\22\3\23\1\22\2\23\1\22\7\23\2\22\2\23\2\0\2\15\1\22\3\23\1\0\10\22\2"+
    "\0\2\22\2\0\6\22\1\0\7\22\1\0\1\22\3\0\4\22\2\0\1\23\1\22\7\23\2\0\2\23\2"+
    "\0\3\23\1\22\5\0\2\22\1\0\5\22\7\0\2\22\4\0\3\23\1\0\6\22\4\0\2\22\1\0\2\22"+
    "\1\0\2\22\1\0\2\22\2\0\1\23\1\0\5\23\4\0\2\23\2\0\3\23\3\0\1\23\7\0\4\22\1"+
    "\0\1\22\7\0\2\15\2\23\3\22\1\23\2\0\1\22\1\0\2\22\1\0\3\22\2\23\1\0\3\23\2"+
    "\0\1\22\10\0\1\22\6\23\6\0\2\23\2\0\1\23\1\22\1\0\6\22\3\0\3\22\1\0\4\22\3"+
    "\0\2\22\1\0\1\22\1\0\4\22\4\0\5\23\3\0\3\23\1\0\4\23\2\0\1\22\6\0\5\23\1\0"+
    "\5\22\3\0\1\22\7\23\1\0\2\23\5\0\2\23\1\0\4\22\1\0\3\22\1\0\2\22\5\0\3\22"+
    "\2\23\1\22\3\23\1\0\4\23\1\22\5\0\3\22\1\23\2\0\2\23\1\0\7\22\1\0\1\22\4\0"+
    "\1\23\4\0\6\23\1\0\1\23\3\0\2\23\4\0\1\22\1\23\2\22\7\23\4\0\10\22\10\23\1"+
    "\0\2\15\7\0\2\22\1\0\1\22\2\0\2\22\1\0\1\22\2\0\1\22\6\0\4\22\1\0\3\22\1\0"+
    "\1\22\1\0\1\22\2\0\2\22\1\0\3\22\2\23\1\0\2\23\1\22\2\0\5\22\1\0\1\22\1\0"+
    "\2\15\2\0\4\22\2\23\13\0\1\23\1\0\1\23\1\0\1\23\4\0\2\23\5\22\10\23\11\0\1"+
    "\23\1\0\7\23\1\22\2\23\4\22\3\23\1\22\3\23\2\22\7\23\3\22\4\23\5\22\14\23"+
    "\1\22\1\23\2\15\4\23\2\0\3\22\1\0\7\22\2\0\3\23\2\22\3\23\3\0\2\22\2\23\4"+
    "\0\1\22\1\0\2\23\4\0\4\22\10\23\3\0\1\22\3\0\2\22\1\23\5\0\4\23\1\0\5\22\2"+
    "\23\2\22\1\23\1\22\5\0\5\23\3\22\3\0\10\23\5\22\2\15\3\0\3\22\3\23\1\0\5\23"+
    "\4\22\1\23\4\22\3\23\2\22\3\23\1\0\5\23\1\0\1\22\1\0\1\22\1\0\1\22\1\0\1\22"+
    "\2\0\3\22\1\0\6\22\2\0\2\22\2\1\5\23\5\0\1\22\4\0\1\23\3\0\4\23\11\0\1\22"+
    "\4\0\1\22\1\0\5\22\2\0\1\22\1\0\4\22\1\0\3\22\2\0\4\22\5\0\5\22\4\0\1\22\4"+
    "\0\4\22\3\23\2\22\5\0\2\23\2\0\3\22\2\15\2\22\4\0\6\23\1\0\3\22\1\23\3\22"+
    "\1\23\4\22\1\23\4\22\2\23\6\22\3\0\1\22\1\0\1\22\2\0\5\22\1\23\2\22\2\15\5"+
    "\22\1\0\4\22\2\23\4\0\1\22\3\23\2\22\1\23\5\22\2\23\3\0\3\22\4\0\3\22\2\23"+
    "\2\0\6\22\1\0\3\23\1\0\2\23\5\0\5\22\5\0\1\22\1\23\3\22\1\0\2\22\1\0\7\22"+
    "\2\0\1\23\6\0\2\22\2\0\3\22\3\0\2\22\3\0\2\22\2\0\3\23\4\0\3\22\1\0\2\22\1"+
    "\0\1\22\5\0\1\23\2\0\3\23\5\0\1\22\3\0\1\22\2\0\4\22\1\0\2\22\2\0\1\22\3\23"+
    "\1\0\2\23\1\0\5\22\2\23\1\0\3\23\2\0\1\23\2\0\5\23\1\0\2\15\3\22\1\23\2\0"+
    "\1\22\1\0\1\23\4\22\5\0\3\23\3\0\2\15\1\22\1\0\1\22\3\0\2\22\2\23\2\0\6\23"+
    "\2\22\1\0\1\22\1\23\3\0\1\22\3\0\2\22\3\0\5\23\1\22\4\23\3\0\6\23\1\22\6\23"+
    "\3\0\1\23\1\0\2\23\1\0\1\23\2\22\3\0\2\23\6\0\5\23\3\0\6\23\2\0\3\23\2\0\4"+
    "\23\4\0\1\22\2\0\2\22\2\0\4\22\1\0\4\22\1\0\1\22\1\0\6\22\2\0\5\22\1\0\4\22"+
    "\1\0\4\22\2\0\2\15\4\0\1\23\3\0\1\23\2\0\7\23\1\0\2\23\1\0\2\23\1\0\1\22\1"+
    "\0\1\22\5\0\1\22\1\0\1\22\1\0\3\22\1\0\3\22\1\0\3\22");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\10\2\11\1\12\1\11\1\13\1\14\1\15"+
    "\16\11\1\16\1\11\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\3\2\5\1\40\1\41"+
    "\6\40\1\42\2\43\2\40\1\1\1\44\1\45\1\0"+
    "\1\46\1\0\1\47\1\0\1\50\1\51\1\52\1\53"+
    "\1\54\3\11\1\55\1\13\1\0\1\15\17\11\1\56"+
    "\7\11\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\2\0\2\5\1\66\1\40\10\0\1\67\1\70\1\46"+
    "\1\71\1\0\1\72\1\11\1\73\6\11\1\74\4\11"+
    "\1\0\2\11\1\75\2\11\1\0\11\11\2\0\3\76"+
    "\3\77\1\100\3\101\3\102\3\103\3\104\1\71\1\105"+
    "\1\0\12\11\1\106\11\11\1\107\1\11\1\110\2\11"+
    "\1\111\1\11\1\0\7\11\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\11\1\120\16\11\1\121\3\11\1\122"+
    "\3\11\1\123\1\11\1\0\1\11\1\124\1\11\1\125"+
    "\13\11\1\126\6\11\1\127\1\130\7\11\1\131\1\132"+
    "\1\133\2\11\1\134\1\135\26\11\1\136\10\11\1\137"+
    "\3\11\1\140\1\141\1\142\1\11\1\143\1\144\5\11"+
    "\1\145\4\11\1\146\1\11\1\147\2\11\1\150\11\11"+
    "\1\151\1\11\1\152\1\153\1\154\3\11\1\155\1\156"+
    "\11\11\1\157\1\160\1\11\1\161\1\11\1\162\6\11"+
    "\1\163\4\11\1\164";

  private static int [] zzUnpackAction() {
    int [] result = new int[407];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u025b"+
    "\0\u025b\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f"+
    "\0\u025b\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754"+
    "\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c"+
    "\0\u025b\0\u09af\0\u025b\0\u09f2\0\u0a35\0\u0a78\0\u025b\0\u025b"+
    "\0\u025b\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u025b\0\u025b\0\u025b"+
    "\0\u025b\0\u025b\0\u025b\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3"+
    "\0\u0d16\0\u025b\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8"+
    "\0\u0eeb\0\u0e65\0\u0f2e\0\u0f2e\0\u025b\0\u025b\0\u03ed\0\u0f71"+
    "\0\u0fb4\0\u025b\0\u0ff7\0\u025b\0\u025b\0\u025b\0\u025b\0\u053c"+
    "\0\u103a\0\u107d\0\u10c0\0\u025b\0\u025b\0\u1103\0\u025b\0\u1146"+
    "\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e"+
    "\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u053c\0\u1533"+
    "\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u025b\0\u025b"+
    "\0\u025b\0\u025b\0\u025b\0\u025b\0\u025b\0\u1708\0\u174b\0\u178e"+
    "\0\u17d1\0\u025b\0\u1814\0\u0d59\0\u0d9c\0\u1857\0\u189a\0\u0ddf"+
    "\0\u0e22\0\u18dd\0\u1920\0\u025b\0\u025b\0\u025b\0\u1963\0\u19a6"+
    "\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe"+
    "\0\u1c01\0\u053c\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93"+
    "\0\u1dd6\0\u053c\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68"+
    "\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180"+
    "\0\u025b\0\u21c3\0\u213d\0\u025b\0\u2206\0\u2180\0\u025b\0\u025b"+
    "\0\u2249\0\u1857\0\u025b\0\u228c\0\u189a\0\u025b\0\u22cf\0\u18dd"+
    "\0\u025b\0\u2312\0\u1920\0\u025b\0\u025b\0\u19e9\0\u2355\0\u2398"+
    "\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0"+
    "\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8"+
    "\0\u280b\0\u284e\0\u025b\0\u2891\0\u053c\0\u28d4\0\u2917\0\u025b"+
    "\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f"+
    "\0\u2b72\0\u025b\0\u025b\0\u025b\0\u025b\0\u025b\0\u025b\0\u2bb5"+
    "\0\u053c\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a"+
    "\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u053c"+
    "\0\u2fa2\0\u2fe5\0\u3028\0\u053c\0\u306b\0\u30ae\0\u30f1\0\u053c"+
    "\0\u3134\0\u3177\0\u31ba\0\u025b\0\u31fd\0\u053c\0\u3240\0\u3283"+
    "\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2\0\u3415\0\u3458\0\u349b"+
    "\0\u34de\0\u053c\0\u3521\0\u3564\0\u35a7\0\u35ea\0\u362d\0\u3670"+
    "\0\u053c\0\u053c\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802"+
    "\0\u3845\0\u025b\0\u053c\0\u053c\0\u3888\0\u38cb\0\u053c\0\u053c"+
    "\0\u390e\0\u3951\0\u3994\0\u39d7\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3"+
    "\0\u3b26\0\u3b69\0\u3bac\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb"+
    "\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07\0\u3e4a\0\u3e8d\0\u053c\0\u3ed0"+
    "\0\u3f13\0\u3f56\0\u3f99\0\u3fdc\0\u401f\0\u4062\0\u40a5\0\u053c"+
    "\0\u40e8\0\u412b\0\u416e\0\u053c\0\u053c\0\u053c\0\u41b1\0\u053c"+
    "\0\u053c\0\u41f4\0\u4237\0\u427a\0\u42bd\0\u4300\0\u053c\0\u4343"+
    "\0\u4386\0\u43c9\0\u440c\0\u053c\0\u444f\0\u053c\0\u4492\0\u44d5"+
    "\0\u053c\0\u4518\0\u455b\0\u459e\0\u45e1\0\u4624\0\u4667\0\u46aa"+
    "\0\u46ed\0\u4730\0\u053c\0\u4773\0\u053c\0\u053c\0\u053c\0\u47b6"+
    "\0\u47f9\0\u483c\0\u053c\0\u053c\0\u487f\0\u48c2\0\u4905\0\u4948"+
    "\0\u498b\0\u49ce\0\u4a11\0\u4a54\0\u4a97\0\u053c\0\u053c\0\u4ada"+
    "\0\u053c\0\u4b1d\0\u4b60\0\u4ba3\0\u4be6\0\u4c29\0\u4c6c\0\u4caf"+
    "\0\u4cf2\0\u053c\0\u4d35\0\u4d78\0\u4dbb\0\u4dfe\0\u053c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[407];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\2\13\1\14\3\15\1\16\1\17\1\13\1\20"+
    "\1\21\1\17\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\12\1\30\1\31\1\32\1\33\1\34\5\27\1\35"+
    "\1\36\1\27\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\27\1\47\2\27\1\50\1\27\1\51"+
    "\1\52\1\27\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\12\2\13\1\14\3\74\1\16"+
    "\1\75\1\13\1\20\1\21\1\76\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\12\1\30\1\31\1\32\1\33"+
    "\1\34\5\27\1\35\1\36\1\27\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\27\1\47\2\27"+
    "\1\50\1\27\1\51\1\52\1\27\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\77\3\12"+
    "\2\77\1\12\1\100\1\77\1\12\13\77\1\101\55\77"+
    "\107\102\3\103\1\102\1\104\76\102\3\105\5\102\1\106"+
    "\66\102\1\107\3\12\2\110\1\111\2\107\1\12\71\107"+
    "\1\112\3\12\2\112\1\12\2\112\1\12\71\112\1\113"+
    "\3\114\2\113\1\114\2\113\1\114\45\113\1\115\23\113"+
    "\107\0\1\13\100\0\1\13\1\0\1\13\102\0\3\15"+
    "\76\0\1\116\100\0\1\17\3\0\2\17\1\0\2\17"+
    "\1\0\71\17\15\0\1\117\1\120\1\0\1\121\3\0"+
    "\1\117\65\0\1\122\5\0\1\120\1\123\5\0\1\120"+
    "\1\124\40\0\1\125\1\126\1\127\23\0\1\27\3\0"+
    "\1\27\1\0\2\27\1\0\3\27\2\0\7\27\1\130"+
    "\20\27\1\0\2\27\32\0\1\27\3\0\1\27\1\0"+
    "\2\27\1\0\3\27\2\0\11\27\1\131\3\27\1\132"+
    "\12\27\1\0\1\27\1\133\42\0\1\134\72\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\30\27"+
    "\1\0\2\27\36\0\1\117\1\120\1\135\1\121\3\0"+
    "\1\30\56\0\2\32\2\0\21\32\1\136\1\137\54\32"+
    "\11\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\20\27\1\140\7\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\1\27"+
    "\1\141\26\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\10\27\1\142\3\27"+
    "\1\143\13\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\11\27\1\144\16\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\14\27\1\145\1\146\1\27\1\147"+
    "\4\27\1\150\3\27\1\0\2\27\32\0\1\27\3\0"+
    "\1\27\1\0\2\27\1\0\3\27\2\0\20\27\1\151"+
    "\7\27\1\0\2\27\32\0\1\27\3\0\1\27\1\0"+
    "\2\27\1\0\3\27\2\0\13\27\1\152\14\27\1\0"+
    "\2\27\32\0\1\27\3\0\1\27\1\0\2\27\1\0"+
    "\3\27\2\0\14\27\1\153\1\27\1\154\11\27\1\0"+
    "\2\27\32\0\1\27\3\0\1\27\1\0\2\27\1\0"+
    "\3\27\2\0\21\27\1\155\6\27\1\0\2\27\32\0"+
    "\1\27\3\0\1\27\1\0\1\156\1\27\1\0\3\27"+
    "\2\0\14\27\1\157\13\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\1\27\1\160\1\0\3\27\2\0"+
    "\30\27\1\0\2\27\32\0\1\27\3\0\1\27\1\0"+
    "\2\27\1\0\3\27\2\0\22\27\1\161\5\27\1\0"+
    "\2\27\32\0\1\27\3\0\1\27\1\0\1\27\1\162"+
    "\1\0\3\27\2\0\20\27\1\163\3\27\1\164\3\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\15\27\1\165\12\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\1\27\1\166\1\0"+
    "\3\27\2\0\30\27\1\0\2\27\105\0\1\167\102\0"+
    "\1\170\103\0\1\171\106\0\1\172\103\0\1\173\74\0"+
    "\1\174\102\0\1\175\22\0\3\74\1\0\1\176\3\0"+
    "\1\177\66\0\1\17\3\0\2\17\1\0\2\17\1\0"+
    "\1\200\71\17\3\0\2\17\1\0\2\17\1\0\1\201"+
    "\70\17\2\0\1\202\102\0\1\202\4\0\1\203\75\0"+
    "\1\202\22\0\1\203\1\0\1\203\6\0\1\203\1\0"+
    "\1\203\1\0\1\203\4\0\1\203\37\0\3\204\1\0"+
    "\1\205\104\0\1\206\1\207\73\0\3\210\5\0\1\211"+
    "\100\0\1\212\1\213\71\0\1\214\102\0\1\214\1\0"+
    "\3\111\100\0\3\111\76\0\1\215\2\0\1\215\112\0"+
    "\1\120\1\0\1\216\1\121\3\0\1\120\73\0\1\217"+
    "\3\0\1\220\2\0\1\217\40\0\1\220\33\0\1\221"+
    "\75\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\10\27\1\222\6\27\1\223\10\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\16\27\1\224\11\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\1\27\1\225\1\0\3\27\2\0"+
    "\30\27\1\0\2\27\21\0\2\32\2\0\77\32\11\0"+
    "\1\27\3\0\1\27\1\0\1\27\1\226\1\0\3\27"+
    "\2\0\30\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\2\27\1\227\1\27"+
    "\1\230\23\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\11\27\1\231\16\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\20\27\1\232\7\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\13\27\1\233\5\27\1\234\6\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\11\27\1\235\16\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\24\27"+
    "\1\236\3\27\1\0\2\27\26\0\1\237\3\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\30\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\13\27\1\240\2\27\1\241\11\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\25\27\1\242\2\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\22\27\1\243\5\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\24\27"+
    "\1\244\3\27\1\0\2\27\26\0\1\245\3\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\30\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\1\246"+
    "\1\27\1\0\3\27\2\0\30\27\1\0\2\27\32\0"+
    "\1\27\3\0\1\27\1\0\2\27\1\0\3\27\2\0"+
    "\20\27\1\247\7\27\1\0\2\27\32\0\1\27\3\0"+
    "\1\27\1\0\2\27\1\0\3\27\2\0\13\27\1\250"+
    "\14\27\1\0\2\27\32\0\1\27\3\0\1\27\1\0"+
    "\1\251\1\27\1\0\3\27\2\0\30\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\20\27\1\252\7\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\14\27"+
    "\1\253\13\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\20\27\1\254\7\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\14\27\1\255\13\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\13\27\1\256\14\27\1\0\2\27\33\0\1\257"+
    "\102\0\1\260\70\0\1\17\2\261\1\262\2\200\1\263"+
    "\2\17\1\261\72\17\2\264\1\265\2\201\1\266\2\17"+
    "\1\264\71\17\2\0\1\267\101\0\2\270\1\271\2\206"+
    "\1\272\2\0\1\270\72\0\2\273\1\274\2\207\1\275"+
    "\2\0\1\273\72\0\2\276\1\277\2\212\1\300\2\0"+
    "\1\276\72\0\2\301\1\302\2\213\1\303\2\0\1\301"+
    "\106\0\1\217\1\0\1\304\4\0\1\217\73\0\1\217"+
    "\6\0\1\217\60\0\1\305\1\0\3\306\105\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\30\27"+
    "\1\0\1\307\1\27\32\0\1\27\3\0\1\27\1\0"+
    "\1\310\1\311\1\0\3\27\2\0\1\27\1\312\5\27"+
    "\1\313\2\27\1\314\3\27\1\315\2\27\1\316\1\27"+
    "\1\317\4\27\1\0\1\320\1\27\32\0\1\27\3\0"+
    "\1\27\1\0\1\27\1\321\1\0\3\27\2\0\30\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\11\27\1\322\16\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\24\27\1\323\3\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\3\27"+
    "\1\324\24\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\3\27\1\325\24\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\12\27\1\326\15\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\1\327\1\27\1\0"+
    "\3\27\2\0\30\27\1\0\2\27\32\0\1\27\3\0"+
    "\1\27\1\0\1\330\1\27\1\0\3\27\2\0\30\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\13\27\1\331\14\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\16\27\1\332\11\27\1\0\2\27\21\0\5\333"+
    "\1\237\51\333\1\0\23\333\11\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\12\27\1\334\15\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\1\27"+
    "\1\335\1\0\3\27\2\0\30\27\1\0\2\27\32\0"+
    "\1\27\3\0\1\27\1\0\1\27\1\336\1\0\3\27"+
    "\2\0\30\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\17\27\1\337\10\27"+
    "\1\0\2\27\21\0\5\340\1\245\51\340\1\0\23\340"+
    "\11\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\13\27\1\341\14\27\1\0\2\27\26\0\1\342"+
    "\3\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\30\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\10\27\1\343\17\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\15\27\1\344\12\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\16\27\1\345\11\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\23\27"+
    "\1\346\4\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\7\27\1\347\20\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\1\350\27\27\1\0\2\27\32\0"+
    "\1\27\3\0\1\27\1\0\2\27\1\0\3\27\2\0"+
    "\22\27\1\351\5\27\1\0\2\27\22\0\2\261\1\262"+
    "\2\257\1\263\2\0\1\261\72\0\2\264\1\265\2\260"+
    "\1\266\2\0\1\264\73\0\1\352\102\0\1\353\102\0"+
    "\1\354\102\0\1\355\102\0\1\356\102\0\1\357\111\0"+
    "\1\27\3\0\1\27\1\0\2\27\1\0\3\27\2\0"+
    "\24\27\1\360\3\27\1\0\2\27\32\0\1\27\3\0"+
    "\1\27\1\0\2\27\1\0\3\27\2\0\7\27\1\361"+
    "\20\27\1\0\2\27\32\0\1\27\3\0\1\27\1\0"+
    "\2\27\1\0\3\27\2\0\11\27\1\362\16\27\1\0"+
    "\1\27\1\363\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\10\27\1\364\2\27\1\365\14\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\10\27\1\366\3\27\1\367\13\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\15\27\1\370\12\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\21\27\1\371\6\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\22\27"+
    "\1\372\5\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\20\27\1\373\3\27"+
    "\1\374\3\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\1\27\1\375\1\0\3\27\2\0\30\27\1\0"+
    "\2\27\32\0\1\27\3\0\1\27\1\0\1\376\1\27"+
    "\1\0\3\27\2\0\30\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\13\27"+
    "\1\377\14\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\27\27\1\u0100\1\0"+
    "\2\27\32\0\1\27\3\0\1\27\1\0\2\27\1\0"+
    "\3\27\2\0\4\27\1\u0101\23\27\1\0\2\27\32\0"+
    "\1\27\3\0\1\27\1\0\2\27\1\0\3\27\2\0"+
    "\6\27\1\u0102\21\27\1\0\2\27\32\0\1\27\3\0"+
    "\1\27\1\0\2\27\1\0\3\27\2\0\13\27\1\u0103"+
    "\14\27\1\0\2\27\32\0\1\27\3\0\1\27\1\0"+
    "\2\27\1\0\3\27\2\0\15\27\1\u0104\12\27\1\0"+
    "\2\27\32\0\1\27\3\0\1\27\1\0\2\27\1\0"+
    "\3\27\2\0\11\27\1\u0105\16\27\1\0\2\27\32\0"+
    "\1\27\3\0\1\27\1\0\1\u0106\1\27\1\0\3\27"+
    "\2\0\30\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\16\27\1\u0107\11\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\22\27\1\u0108\5\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\20\27\1\u0109\7\27\1\0\2\27\26\0\1\u010a"+
    "\3\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\30\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\12\27\1\u010b\15\27"+
    "\1\0\2\27\21\0\5\u010c\1\342\51\u010c\1\0\23\u010c"+
    "\11\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\20\27\1\u010d\7\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\1\27\1\u010e\1\0\3\27\2\0"+
    "\30\27\1\0\2\27\32\0\1\27\3\0\1\27\1\0"+
    "\1\u010f\1\27\1\0\3\27\2\0\30\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\1\27\1\u0110\1\0"+
    "\3\27\2\0\30\27\1\0\2\27\32\0\1\27\3\0"+
    "\1\27\1\0\2\27\1\0\3\27\2\0\14\27\1\u0111"+
    "\13\27\1\0\2\27\32\0\1\27\3\0\1\27\1\0"+
    "\2\27\1\0\3\27\2\0\24\27\1\u0112\3\27\1\0"+
    "\2\27\32\0\1\27\3\0\1\27\1\0\2\27\1\0"+
    "\3\27\2\0\14\27\1\u0113\13\27\1\0\2\27\32\0"+
    "\1\27\3\0\1\27\1\0\2\27\1\0\3\27\2\0"+
    "\20\27\1\u0114\7\27\1\0\2\27\32\0\1\27\3\0"+
    "\1\27\1\0\2\27\1\0\3\27\2\0\10\27\1\u0115"+
    "\17\27\1\0\2\27\32\0\1\27\3\0\1\27\1\0"+
    "\1\27\1\u0116\1\0\3\27\2\0\30\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\11\27\1\u0117\16\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\20\27"+
    "\1\u0118\7\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\11\27\1\u0119\16\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\20\27\1\u011a\7\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\24\27\1\u011b\3\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\1\u011c\1\27\1\0\3\27\2\0"+
    "\30\27\1\0\2\27\32\0\1\27\3\0\1\27\1\0"+
    "\1\u011d\1\27\1\0\3\27\2\0\30\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\14\27\1\u011e\13\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\20\27"+
    "\1\u011f\7\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\13\27\1\u0120\14\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\7\27\1\u0121\20\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\16\27\1\u0122\11\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\5\27"+
    "\1\u0123\22\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\5\27\1\u0124\22\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\1\u0125"+
    "\1\27\1\0\3\27\2\0\30\27\1\0\2\27\32\0"+
    "\1\27\3\0\1\27\1\0\2\27\1\0\3\27\2\0"+
    "\17\27\1\u0126\10\27\1\0\2\27\32\0\1\27\3\0"+
    "\1\27\1\0\2\27\1\0\3\27\2\0\11\27\1\u0127"+
    "\16\27\1\0\2\27\32\0\1\27\3\0\1\27\1\0"+
    "\2\27\1\0\3\27\2\0\17\27\1\u0128\10\27\1\0"+
    "\2\27\32\0\1\27\3\0\1\27\1\0\2\27\1\0"+
    "\3\27\2\0\21\27\1\u0129\6\27\1\0\2\27\21\0"+
    "\5\u012a\1\u010a\51\u012a\1\0\23\u012a\11\0\1\27\3\0"+
    "\1\27\1\0\2\27\1\0\3\27\2\0\22\27\1\u012b"+
    "\5\27\1\0\2\27\32\0\1\27\3\0\1\27\1\0"+
    "\2\27\1\0\3\27\2\0\11\27\1\u012c\16\27\1\0"+
    "\2\27\32\0\1\27\3\0\1\27\1\0\2\27\1\0"+
    "\3\27\2\0\16\27\1\u012d\11\27\1\0\2\27\32\0"+
    "\1\27\3\0\1\27\1\0\2\27\1\0\3\27\2\0"+
    "\20\27\1\u012e\7\27\1\0\2\27\32\0\1\27\3\0"+
    "\1\27\1\0\2\27\1\0\3\27\2\0\20\27\1\u012f"+
    "\7\27\1\0\2\27\32\0\1\27\3\0\1\27\1\0"+
    "\2\27\1\0\3\27\2\0\15\27\1\u0130\12\27\1\0"+
    "\2\27\32\0\1\27\3\0\1\27\1\0\2\27\1\0"+
    "\3\27\2\0\17\27\1\u0131\10\27\1\0\2\27\32\0"+
    "\1\27\3\0\1\27\1\0\2\27\1\0\3\27\2\0"+
    "\24\27\1\u0132\3\27\1\0\2\27\32\0\1\27\3\0"+
    "\1\27\1\0\2\27\1\0\3\27\2\0\30\27\1\0"+
    "\1\u0133\1\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\11\27\1\u0134\16\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\21\27\1\u0135\6\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\25\27"+
    "\1\u0136\2\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\12\27\1\u0137\15\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\16\27\1\u0138\11\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\13\27\1\u0139\14\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\15\27"+
    "\1\u013a\12\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\23\27\1\u013b\4\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\7\27\1\u013c\20\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\22\27\1\u013d\5\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\1\27"+
    "\1\u013e\26\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\1\27\1\u013f\26\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\14\27\1\u0140\13\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\1\27\1\u0141\26\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\10\27"+
    "\1\u0142\17\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\1\27\1\u0143\1\0\3\27\2\0\30\27\1\0"+
    "\2\27\32\0\1\27\3\0\1\27\1\0\1\u0144\1\27"+
    "\1\0\3\27\2\0\30\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\13\27"+
    "\1\u0145\14\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\13\27\1\u0146\14\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\16\27\1\u0147\11\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\13\27\1\u0148\14\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\1\27\1\u0149\1\0\3\27\2\0"+
    "\30\27\1\0\2\27\32\0\1\27\3\0\1\27\1\0"+
    "\2\27\1\0\3\27\2\0\13\27\1\u014a\14\27\1\0"+
    "\2\27\32\0\1\27\3\0\1\27\1\0\1\u014b\1\27"+
    "\1\0\3\27\2\0\30\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\1\27"+
    "\1\u014c\26\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\13\27\1\u014d\14\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\16\27\1\u014e\11\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\12\27\1\u014f\15\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\1\27\1\u0150\1\0\3\27\2\0"+
    "\30\27\1\0\2\27\32\0\1\27\3\0\1\27\1\0"+
    "\1\27\1\u0151\1\0\3\27\2\0\30\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\14\27\1\u0152\13\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\14\27"+
    "\1\u0153\13\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\1\27\1\u0154\26\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\1\27\1\u0155\26\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\11\27\1\u0156\16\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\23\27"+
    "\1\u0157\4\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\1\27\1\u0158\1\0\3\27\2\0\30\27\1\0"+
    "\2\27\32\0\1\27\3\0\1\27\1\0\2\27\1\0"+
    "\3\27\2\0\7\27\1\u0159\20\27\1\0\2\27\32\0"+
    "\1\27\3\0\1\27\1\0\2\27\1\0\3\27\2\0"+
    "\16\27\1\u015a\11\27\1\0\2\27\32\0\1\27\3\0"+
    "\1\27\1\0\1\27\1\u015b\1\0\3\27\2\0\30\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\1\u015c"+
    "\1\27\1\0\3\27\2\0\30\27\1\0\2\27\32\0"+
    "\1\27\3\0\1\27\1\0\1\u015d\1\27\1\0\3\27"+
    "\2\0\30\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\20\27\1\u015e\7\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\16\27\1\u015f\11\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\11\27\1\u0160\16\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\12\27"+
    "\1\u0161\15\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\1\u0162\1\27\1\0\3\27\2\0\30\27\1\0"+
    "\2\27\32\0\1\27\3\0\1\27\1\0\2\27\1\0"+
    "\3\27\2\0\17\27\1\u0163\10\27\1\0\2\27\32\0"+
    "\1\27\3\0\1\27\1\0\2\27\1\0\3\27\2\0"+
    "\22\27\1\u0164\5\27\1\0\2\27\32\0\1\27\3\0"+
    "\1\27\1\0\2\27\1\0\3\27\2\0\20\27\1\u0165"+
    "\7\27\1\0\2\27\32\0\1\27\3\0\1\27\1\0"+
    "\2\27\1\0\3\27\2\0\20\27\1\u0166\7\27\1\0"+
    "\2\27\32\0\1\27\3\0\1\27\1\0\2\27\1\0"+
    "\3\27\2\0\17\27\1\u0167\10\27\1\0\2\27\32\0"+
    "\1\27\3\0\1\27\1\0\2\27\1\0\3\27\2\0"+
    "\20\27\1\u0168\7\27\1\0\2\27\32\0\1\27\3\0"+
    "\1\27\1\0\1\27\1\u0169\1\0\3\27\2\0\30\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\11\27\1\u016a\16\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\1\27\1\u016b\1\0"+
    "\3\27\2\0\30\27\1\0\2\27\32\0\1\27\3\0"+
    "\1\27\1\0\2\27\1\0\3\27\2\0\14\27\1\u016c"+
    "\13\27\1\0\2\27\32\0\1\27\3\0\1\27\1\0"+
    "\2\27\1\0\3\27\2\0\24\27\1\u016d\3\27\1\0"+
    "\2\27\32\0\1\27\3\0\1\27\1\0\2\27\1\0"+
    "\3\27\2\0\17\27\1\u016e\10\27\1\0\2\27\32\0"+
    "\1\27\3\0\1\27\1\0\2\27\1\0\3\27\2\0"+
    "\24\27\1\u016f\3\27\1\0\2\27\32\0\1\27\3\0"+
    "\1\27\1\0\2\27\1\0\3\27\2\0\14\27\1\u0170"+
    "\13\27\1\0\2\27\32\0\1\27\3\0\1\27\1\0"+
    "\1\27\1\u0171\1\0\3\27\2\0\30\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\13\27\1\u0172\14\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\16\27"+
    "\1\u0173\11\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\14\27\1\u0174\13\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\13\27\1\u0175\14\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\16\27\1\u0176\11\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\11\27"+
    "\1\u0177\16\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\13\27\1\u0178\14\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\1\27\1\u0179\26\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\13\27\1\u017a\14\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\11\27"+
    "\1\u017b\16\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\7\27\1\u017c\20\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\1\u017d"+
    "\1\27\1\0\3\27\2\0\30\27\1\0\2\27\32\0"+
    "\1\27\3\0\1\27\1\0\2\27\1\0\3\27\2\0"+
    "\13\27\1\u017e\14\27\1\0\2\27\32\0\1\27\3\0"+
    "\1\27\1\0\1\u017f\1\27\1\0\3\27\2\0\30\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\23\27\1\u0180\4\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\12\27\1\u0181\15\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\1\27\1\u0182\1\0\3\27\2\0"+
    "\30\27\1\0\2\27\32\0\1\27\3\0\1\27\1\0"+
    "\1\27\1\u0183\1\0\3\27\2\0\30\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\14\27\1\u0184\13\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\20\27"+
    "\1\u0185\7\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\22\27\1\u0186\5\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\16\27\1\u0187\11\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\12\27\1\u0188\15\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\11\27"+
    "\1\u0189\16\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\14\27\1\u018a\13\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\13\27\1\u018b\14\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\13\27\1\u018c\14\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\1\27"+
    "\1\u018d\26\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\1\27\1\u018e\1\0\3\27\2\0\30\27\1\0"+
    "\2\27\32\0\1\27\3\0\1\27\1\0\2\27\1\0"+
    "\3\27\2\0\12\27\1\u018f\15\27\1\0\2\27\32\0"+
    "\1\27\3\0\1\27\1\0\2\27\1\0\3\27\2\0"+
    "\12\27\1\u0190\15\27\1\0\2\27\32\0\1\27\3\0"+
    "\1\27\1\0\2\27\1\0\3\27\2\0\15\27\1\u0191"+
    "\12\27\1\0\2\27\32\0\1\27\3\0\1\27\1\0"+
    "\2\27\1\0\3\27\2\0\13\27\1\u0192\14\27\1\0"+
    "\2\27\32\0\1\27\3\0\1\27\1\0\1\27\1\u0193"+
    "\1\0\3\27\2\0\30\27\1\0\2\27\32\0\1\27"+
    "\3\0\1\27\1\0\2\27\1\0\3\27\2\0\24\27"+
    "\1\u0194\3\27\1\0\2\27\32\0\1\27\3\0\1\27"+
    "\1\0\2\27\1\0\3\27\2\0\11\27\1\u0195\16\27"+
    "\1\0\2\27\32\0\1\27\3\0\1\27\1\0\2\27"+
    "\1\0\3\27\2\0\10\27\1\u0196\17\27\1\0\2\27"+
    "\32\0\1\27\3\0\1\27\1\0\2\27\1\0\3\27"+
    "\2\0\23\27\1\u0197\4\27\1\0\2\27\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20033];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\5\1\2\11\7\1\1\11\17\1\1\11"+
    "\1\1\1\11\3\1\3\11\4\1\6\11\6\1\1\11"+
    "\12\1\2\11\1\0\1\1\1\0\1\11\1\0\4\11"+
    "\4\1\2\11\1\0\1\11\27\1\7\11\2\0\2\1"+
    "\1\11\1\1\10\0\3\11\1\1\1\0\16\1\1\0"+
    "\5\1\1\0\11\1\2\0\1\11\2\1\1\11\2\1"+
    "\2\11\2\1\1\11\2\1\1\11\2\1\1\11\2\1"+
    "\2\11\1\0\24\1\1\11\4\1\1\11\1\1\1\0"+
    "\7\1\6\11\32\1\1\0\1\1\1\11\35\1\1\11"+
    "\155\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[407];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Stack<Integer> stack = new Stack<>();
    private boolean hasUnmatchedText = false;

    public static FlexAdapter getAdapter() {
        return new FlexAdapter(new _OctaveLexer());
    }

    public _OctaveLexer() {
        this(null);
    }

    private void yypushState(int newState) {
      stack.push(yystate());
      yybegin(newState);
    }

    private void yypopState() {
        if (stack.isEmpty()) return;
        yybegin(stack.pop());
    }

    private void yyclearStack() {
        while (!stack.isEmpty()) stack.pop();
    }

    private void stopLookForCtrans() {
        if (yystate() == LOOK_FOR_CTRANS) yypopState();
    }

    private void lookForCtrans() {
        if (yystate() != LOOK_FOR_CTRANS) yypushState(LOOK_FOR_CTRANS);
    }

    private void startWsDoesNotMatter() {
        if (yystate() == LOOK_FOR_CTRANS) yypopState();
        yypushState(YYINITIAL);
    }

    private void stopWsDoesNotMatter() {
        if (yystate() == LOOK_FOR_CTRANS) yypopState();
        if (yystate() == YYINITIAL) yypopState();
    }

    private void startWsMatters() {
        if (yystate() == LOOK_FOR_CTRANS) yypopState();
        yypushState(WS_MATTERS);
    }

    private void stopWsMatters() {
        if (yystate() == LOOK_FOR_CTRANS) yypopState();
        if (yystate() == WS_MATTERS) yypopState();
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _OctaveLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case YYINITIAL: {
              return null;
            }  // fall though
            case 408: break;
            case WS_MATTERS: {
              return null;
            }  // fall though
            case 409: break;
            case LOOK_FOR_CTRANS: {
              return null;
            }  // fall though
            case 410: break;
            case SINGLE_QOUTE_STRING_STATE: {
              yyclearStack(); yybegin(YYINITIAL); return OctaveTokenType.getSINGLE_QUOTE_STRING();
            }  // fall though
            case 411: break;
            case BLOCKCOMMENT_STATE: {
              yyclearStack(); yybegin(YYINITIAL); return OctaveTokenType.getBLOCK_COMMENT();
            }  // fall though
            case 412: break;
            case BLOCK_HASH_COMMENT_STATE: {
              yyclearStack(); yybegin(YYINITIAL); return OctaveTokenType.getBLOCK_COMMENT();
            }  // fall though
            case 413: break;
            case LOOK_FOR_LINECOMMENT: {
              yyclearStack(); yybegin(YYINITIAL); return OctaveTokenType.getCOMMENT();
            }  // fall though
            case 414: break;
            case LINECOMMENT_STATE: {
              yyclearStack(); yybegin(YYINITIAL); return OctaveTokenType.getCOMMENT();
            }  // fall though
            case 415: break;
            case FILE_NAME_STATE: {
              yyclearStack(); yybegin(YYINITIAL); return OctaveTokenType.getFILE_NAME();
            }  // fall though
            case 416: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return OctaveTokenType.getBAD_CHARACTER();
            } 
            // fall through
          case 117: break;
          case 2: 
            { stopLookForCtrans(); return OctaveTokenType.getNEWLINE();
            } 
            // fall through
          case 118: break;
          case 3: 
            { if (yystate() == LOOK_FOR_CTRANS &&
                                    !stack.isEmpty() &&
                                    stack.peek() == WS_MATTERS) {
                                yypopState();
                           }
                            return OctaveTokenType.getWHITE_SPACE();
            } 
            // fall through
          case 119: break;
          case 4: 
            { if (yystate() == LOOK_FOR_CTRANS) {
                                return OctaveTokenType.getTRANS();
                            } else {
                                yypushState(SINGLE_QOUTE_STRING_STATE);
                            }
            } 
            // fall through
          case 120: break;
          case 5: 
            { stopLookForCtrans(); return OctaveTokenType.getCOMMENT();
            } 
            // fall through
          case 121: break;
          case 6: 
            { startWsMatters(); return OctaveTokenType.getLBRACE();
            } 
            // fall through
          case 122: break;
          case 7: 
            { stopWsMatters(); lookForCtrans(); return OctaveTokenType.getRBRACE();
            } 
            // fall through
          case 123: break;
          case 8: 
            { stopLookForCtrans(); return OctaveTokenType.getDOT();
            } 
            // fall through
          case 124: break;
          case 9: 
            { lookForCtrans(); return OctaveTokenType.getIDENTIFIER();
            } 
            // fall through
          case 125: break;
          case 10: 
            { stopLookForCtrans(); return OctaveTokenType.getPLUS();
            } 
            // fall through
          case 126: break;
          case 11: 
            { lookForCtrans(); return OctaveTokenType.getINTEGER();
            } 
            // fall through
          case 127: break;
          case 12: 
            { stopLookForCtrans(); return OctaveTokenType.getLDIV();
            } 
            // fall through
          case 128: break;
          case 13: 
            { lookForCtrans(); return OctaveTokenType.getDOUBLE_QUOTE_STRING();
            } 
            // fall through
          case 129: break;
          case 14: 
            { startWsDoesNotMatter(); return OctaveTokenType.getLPARENTH();
            } 
            // fall through
          case 130: break;
          case 15: 
            { stopWsDoesNotMatter(); lookForCtrans(); return OctaveTokenType.getRPARENTH();
            } 
            // fall through
          case 131: break;
          case 16: 
            { stopLookForCtrans(); return OctaveTokenType.getLESS();
            } 
            // fall through
          case 132: break;
          case 17: 
            { stopLookForCtrans(); return OctaveTokenType.getASSIGN();
            } 
            // fall through
          case 133: break;
          case 18: 
            { stopLookForCtrans(); return OctaveTokenType.getMINUS();
            } 
            // fall through
          case 134: break;
          case 19: 
            { stopLookForCtrans(); return OctaveTokenType.getRDIV();
            } 
            // fall through
          case 135: break;
          case 20: 
            { stopLookForCtrans(); return OctaveTokenType.getMUL();
            } 
            // fall through
          case 136: break;
          case 21: 
            { stopLookForCtrans(); return OctaveTokenType.getPOW();
            } 
            // fall through
          case 137: break;
          case 22: 
            { stopLookForCtrans(); return OctaveTokenType.getMATRIX_AND();
            } 
            // fall through
          case 138: break;
          case 23: 
            { stopLookForCtrans(); return OctaveTokenType.getMATRIX_OR();
            } 
            // fall through
          case 139: break;
          case 24: 
            { stopLookForCtrans(); return OctaveTokenType.getNOT();
            } 
            // fall through
          case 140: break;
          case 25: 
            { stopLookForCtrans(); return OctaveTokenType.getMORE();
            } 
            // fall through
          case 141: break;
          case 26: 
            { stopLookForCtrans(); return OctaveTokenType.getCOMMA();
            } 
            // fall through
          case 142: break;
          case 27: 
            { stopLookForCtrans(); return OctaveTokenType.getCOLON();
            } 
            // fall through
          case 143: break;
          case 28: 
            { stopLookForCtrans(); return OctaveTokenType.getSEMICOLON();
            } 
            // fall through
          case 144: break;
          case 29: 
            { startWsMatters(); return OctaveTokenType.getLBRACKET();
            } 
            // fall through
          case 145: break;
          case 30: 
            { stopWsMatters(); lookForCtrans(); return OctaveTokenType.getRBRACKET();
            } 
            // fall through
          case 146: break;
          case 31: 
            { stopLookForCtrans(); return OctaveTokenType.getAT();
            } 
            // fall through
          case 147: break;
          case 32: 
            { 
            } 
            // fall through
          case 148: break;
          case 33: 
            { yypopState(); lookForCtrans(); return OctaveTokenType.getSINGLE_QUOTE_STRING();
            } 
            // fall through
          case 149: break;
          case 34: 
            { yypopState(); yypushState(LINECOMMENT_STATE);
            } 
            // fall through
          case 150: break;
          case 35: 
            { return OctaveTokenType.getWHITE_SPACE();
            } 
            // fall through
          case 151: break;
          case 36: 
            { yypopState();
            } 
            // fall through
          case 152: break;
          case 37: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (yystate() == LOOK_FOR_CTRANS) {
                              return OctaveTokenType.getTRANS();
                          } else {
                              return OctaveTokenType.getSINGLE_QUOTE_STRING();
                          }
            } 
            // fall through
          case 153: break;
          case 38: 
            { lookForCtrans(); return OctaveTokenType.getFLOAT();
            } 
            // fall through
          case 154: break;
          case 39: 
            { stopLookForCtrans(); return OctaveTokenType.getTRANS();
            } 
            // fall through
          case 155: break;
          case 40: 
            { stopLookForCtrans(); return OctaveTokenType.getDOT_LDIV();
            } 
            // fall through
          case 156: break;
          case 41: 
            { stopLookForCtrans(); return OctaveTokenType.getDOT_RDIV();
            } 
            // fall through
          case 157: break;
          case 42: 
            { stopLookForCtrans(); return OctaveTokenType.getDOT_MUL();
            } 
            // fall through
          case 158: break;
          case 43: 
            { stopLookForCtrans(); return OctaveTokenType.getDOT_POW();
            } 
            // fall through
          case 159: break;
          case 44: 
            { stopLookForCtrans(); return OctaveTokenType.getIF();
            } 
            // fall through
          case 160: break;
          case 45: 
            { stopLookForCtrans(); return OctaveTokenType.getPLUSPLUS();
            } 
            // fall through
          case 161: break;
          case 46: 
            { stopLookForCtrans(); return OctaveTokenType.getDO();
            } 
            // fall through
          case 162: break;
          case 47: 
            { stopLookForCtrans(); return OctaveTokenType.getLESS_OR_EQUAL();
            } 
            // fall through
          case 163: break;
          case 48: 
            { stopLookForCtrans(); return OctaveTokenType.getEQUAL();
            } 
            // fall through
          case 164: break;
          case 49: 
            { stopLookForCtrans(); return OctaveTokenType.getMINUSMINUS();
            } 
            // fall through
          case 165: break;
          case 50: 
            { stopLookForCtrans(); return OctaveTokenType.getAND();
            } 
            // fall through
          case 166: break;
          case 51: 
            { stopLookForCtrans(); return OctaveTokenType.getOR();
            } 
            // fall through
          case 167: break;
          case 52: 
            { stopLookForCtrans(); return OctaveTokenType.getNOT_EQUAL();
            } 
            // fall through
          case 168: break;
          case 53: 
            { stopLookForCtrans(); return OctaveTokenType.getMORE_OR_EQUAL();
            } 
            // fall through
          case 169: break;
          case 54: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yypopState(); return OctaveTokenType.getSINGLE_QUOTE_STRING();
            } 
            // fall through
          case 170: break;
          case 55: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yypopState(); return OctaveTokenType.getCOMMENT();
            } 
            // fall through
          case 171: break;
          case 56: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yypopState(); return OctaveTokenType.getFILE_NAME();
            } 
            // fall through
          case 172: break;
          case 57: 
            { lookForCtrans(); return OctaveTokenType.getFLOAT_EXPONENTIAL();
            } 
            // fall through
          case 173: break;
          case 58: 
            { stopLookForCtrans(); yypushState(LOOK_FOR_LINECOMMENT); return OctaveTokenType.getELLIPSIS();
            } 
            // fall through
          case 174: break;
          case 59: 
            { stopLookForCtrans(); return OctaveTokenType.getEND();
            } 
            // fall through
          case 175: break;
          case 60: 
            { stopLookForCtrans(); return OctaveTokenType.getFOR();
            } 
            // fall through
          case 176: break;
          case 61: 
            { stopLookForCtrans(); return OctaveTokenType.getTRY();
            } 
            // fall through
          case 177: break;
          case 62: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { stopLookForCtrans(); yypushState(BLOCKCOMMENT_STATE);
            } 
            // fall through
          case 178: break;
          case 63: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { stopLookForCtrans(); yypushState(BLOCK_HASH_COMMENT_STATE);
            } 
            // fall through
          case 179: break;
          case 64: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yypopState(); return OctaveTokenType.getSINGLE_QUOTE_STRING();
            } 
            // fall through
          case 180: break;
          case 65: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yypushState(BLOCKCOMMENT_STATE);
            } 
            // fall through
          case 181: break;
          case 66: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yypopState();
                               if (yystate() != BLOCKCOMMENT_STATE) return OctaveTokenType.getBLOCK_COMMENT();
            } 
            // fall through
          case 182: break;
          case 67: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yypushState(BLOCK_HASH_COMMENT_STATE);
            } 
            // fall through
          case 183: break;
          case 68: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yypopState();
                                   if (yystate() != BLOCK_HASH_COMMENT_STATE) return OctaveTokenType.getBLOCK_COMMENT();
            } 
            // fall through
          case 184: break;
          case 69: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { stopLookForCtrans(); return OctaveTokenType.getELLIPSIS();
            } 
            // fall through
          case 185: break;
          case 70: 
            { stopLookForCtrans(); return OctaveTokenType.getELSE();
            } 
            // fall through
          case 186: break;
          case 71: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { stopLookForCtrans(); yypushState(FILE_NAME_STATE); return OctaveTokenType.getCD();
            } 
            // fall through
          case 187: break;
          case 72: 
            { stopLookForCtrans(); return OctaveTokenType.getCASE();
            } 
            // fall through
          case 188: break;
          case 73: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { stopLookForCtrans(); yypushState(FILE_NAME_STATE); return OctaveTokenType.getLS();
            } 
            // fall through
          case 189: break;
          case 74: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { stopLookForCtrans(); yypushState(BLOCKCOMMENT_STATE);
            } 
            // fall through
          case 190: break;
          case 75: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { stopLookForCtrans(); yypushState(BLOCK_HASH_COMMENT_STATE);
            } 
            // fall through
          case 191: break;
          case 76: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { yypushState(BLOCKCOMMENT_STATE);
            } 
            // fall through
          case 192: break;
          case 77: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { yypopState();
                               if (yystate() != BLOCKCOMMENT_STATE) return OctaveTokenType.getBLOCK_COMMENT();
            } 
            // fall through
          case 193: break;
          case 78: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { yypushState(BLOCK_HASH_COMMENT_STATE);
            } 
            // fall through
          case 194: break;
          case 79: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { yypopState();
                                   if (yystate() != BLOCK_HASH_COMMENT_STATE) return OctaveTokenType.getBLOCK_COMMENT();
            } 
            // fall through
          case 195: break;
          case 80: 
            { stopLookForCtrans(); return OctaveTokenType.getENDIF();
            } 
            // fall through
          case 196: break;
          case 81: 
            { stopLookForCtrans(); return OctaveTokenType.getBREAK();
            } 
            // fall through
          case 197: break;
          case 82: 
            { stopLookForCtrans(); return OctaveTokenType.getUNTIL();
            } 
            // fall through
          case 198: break;
          case 83: 
            { stopLookForCtrans(); return OctaveTokenType.getCATCH();
            } 
            // fall through
          case 199: break;
          case 84: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { stopLookForCtrans(); yypushState(FILE_NAME_STATE); return OctaveTokenType.getDIR();
            } 
            // fall through
          case 200: break;
          case 85: 
            { stopLookForCtrans(); return OctaveTokenType.getWHILE();
            } 
            // fall through
          case 201: break;
          case 86: 
            { stopLookForCtrans(); return OctaveTokenType.getENDFOR();
            } 
            // fall through
          case 202: break;
          case 87: 
            { stopLookForCtrans(); return OctaveTokenType.getELSEIF();
            } 
            // fall through
          case 203: break;
          case 88: 
            { stopLookForCtrans(); return OctaveTokenType.getEVENTS();
            } 
            // fall through
          case 204: break;
          case 89: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { stopLookForCtrans(); yypushState(FILE_NAME_STATE); return OctaveTokenType.getLOAD();
            } 
            // fall through
          case 205: break;
          case 90: 
            { stopLookForCtrans(); return OctaveTokenType.getSWITCH();
            } 
            // fall through
          case 206: break;
          case 91: 
            { stopLookForCtrans(); return OctaveTokenType.getRETURN();
            } 
            // fall through
          case 207: break;
          case 92: 
            { stopLookForCtrans(); return OctaveTokenType.getPARFOR();
            } 
            // fall through
          case 208: break;
          case 93: 
            { stopLookForCtrans(); return OctaveTokenType.getGLOBAL();
            } 
            // fall through
          case 209: break;
          case 94: 
            { stopLookForCtrans(); return OctaveTokenType.getMETHODS();
            } 
            // fall through
          case 210: break;
          case 95: 
            { stopLookForCtrans(); return OctaveTokenType.getENDWHILE();
            } 
            // fall through
          case 211: break;
          case 96: 
            { lookForCtrans(); return OctaveTokenType.get__FILE__();
            } 
            // fall through
          case 212: break;
          case 97: 
            { lookForCtrans(); return OctaveTokenType.get__LINE__();
            } 
            // fall through
          case 213: break;
          case 98: 
            { stopLookForCtrans(); return OctaveTokenType.getFUNCTION();
            } 
            // fall through
          case 214: break;
          case 99: 
            { stopLookForCtrans(); return OctaveTokenType.getCONTINUE();
            } 
            // fall through
          case 215: break;
          case 100: 
            { stopLookForCtrans(); return OctaveTokenType.getCLASSDEF();
            } 
            // fall through
          case 216: break;
          case 101: 
            { stopLookForCtrans(); return OctaveTokenType.getENDEVENTS();
            } 
            // fall through
          case 217: break;
          case 102: 
            { stopLookForCtrans(); return OctaveTokenType.getENDSWITCH();
            } 
            // fall through
          case 218: break;
          case 103: 
            { stopLookForCtrans(); return OctaveTokenType.getENDPARFOR();
            } 
            // fall through
          case 219: break;
          case 104: 
            { stopLookForCtrans(); return OctaveTokenType.getOTHERWISE();
            } 
            // fall through
          case 220: break;
          case 105: 
            { stopLookForCtrans(); return OctaveTokenType.getENDMETHODS();
            } 
            // fall through
          case 221: break;
          case 106: 
            { stopLookForCtrans(); return OctaveTokenType.getPERSISTENT();
            } 
            // fall through
          case 222: break;
          case 107: 
            { stopLookForCtrans(); return OctaveTokenType.getPROPERTIES();
            } 
            // fall through
          case 223: break;
          case 108: 
            { stopLookForCtrans(); return OctaveTokenType.getENUMERATION();
            } 
            // fall through
          case 224: break;
          case 109: 
            { stopLookForCtrans(); return OctaveTokenType.getENDFUNCTION();
            } 
            // fall through
          case 225: break;
          case 110: 
            { stopLookForCtrans(); return OctaveTokenType.getENDCLASSDEF();
            } 
            // fall through
          case 226: break;
          case 111: 
            { stopLookForCtrans(); return OctaveTokenType.getEND_TRY_CATCH();
            } 
            // fall through
          case 227: break;
          case 112: 
            { stopLookForCtrans(); return OctaveTokenType.getENDPROPERTIES();
            } 
            // fall through
          case 228: break;
          case 113: 
            { stopLookForCtrans(); return OctaveTokenType.getENDENUMERATION();
            } 
            // fall through
          case 229: break;
          case 114: 
            { stopLookForCtrans(); return OctaveTokenType.getUNWIND_PROTECT();
            } 
            // fall through
          case 230: break;
          case 115: 
            { stopLookForCtrans(); return OctaveTokenType.getEND_UNWIND_PROTECT();
            } 
            // fall through
          case 231: break;
          case 116: 
            { stopLookForCtrans(); return OctaveTokenType.getUNWIND_PROTECT_CLEANUP();
            } 
            // fall through
          case 232: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
